#![feature(plugin)]
#![plugin(docopt_macros)]

extern crate docopt;
#[macro_use]
extern crate error_chain;
extern crate jobsteal;
extern crate num_cpus;
extern crate pbr;
extern crate protobuf;
extern crate rustc_serialize;
extern crate sparkey;
extern crate vcdiff;

mod diff;
mod diff_writer;
mod error;

use std::io;
use std::mem;
use std::path;
use std::sync;
use std::time;

const CHUNK_SIZE: usize = 8192;

// This generates an Args struct that parses the following CLI
// argument specification
docopt!(Args derive Debug, "
A tool for creating differences between Sparkey files

Usage:
  sparkey-diff --help
  sparkey-diff -c [-f] [-r] -l <old-log> -i <old-index> -L <new-log> -I <new-index> -d <diff>
  sparkey-diff -a [-f] -l <old-log> -i <old-index> -L <new-log> -I <new-index> -d <diff>

Options:
  --help
      Show this screen

  --create, -c
      Create the diff file (.spd).
  --apply, -a
      Apply the diff file (.spd)

  --force, -f
      Force overwrite of existing files.
  --assume-no-removals, -r
      Assume there are no removals between the old and new index,
      skipping a pass over the files.

  --old-log <old-log>, -l <old-log>
      Old Sparkey log file (.spl).
  --old-index <old-index>, -i <old-index>
      Old Sparkey index file (.spi).
  --new-log <new-log>, -L <new-log>
      New Sparkey log file (.spl).
  --new-index <new-index>, -I <new-index>
      New Sparkey index file (.spi).
  --diff <diff>, -d <diff>
      Diff file (.spd).
");

struct Paths<'a> {
    old_log_path: &'a path::Path,
    old_index_path: &'a path::Path,
    new_log_path: &'a path::Path,
    new_index_path: &'a path::Path,
    diff_path: &'a path::Path,
}

fn main() {
    let args: Args = Args::docopt().decode().unwrap_or_else(|e| e.exit());

    let paths = Paths {
        old_log_path: path::Path::new(&args.flag_old_log),
        old_index_path: path::Path::new(&args.flag_old_index),
        new_log_path: path::Path::new(&args.flag_new_log),
        new_index_path: path::Path::new(&args.flag_new_index),
        diff_path: path::Path::new(&args.flag_diff),
    };

    if args.flag_create {
        create(&paths, args.flag_assume_no_removals).unwrap()
    } else if args.flag_apply {
        apply(&paths).unwrap()
    } else {
        unreachable!()
    }
}

fn create(paths: &Paths, assume_no_removals: bool) -> error::Result<()> {
    if !assume_no_removals {
        return Err("Checking for removals is not yet implemented".into());
    }

    let old_reader = sparkey::hash::Reader::open(paths.old_index_path,
                                                 paths.old_log_path)?;
    let new_reader = sparkey::hash::Reader::open(paths.new_index_path,
                                                 paths.new_log_path)?;

    let mut pool = jobsteal::make_pool(num_cpus::get())?;
    let mut mb = pbr::MultiBar::on(io::stderr());
    mb.println("Scanning all keys...");

    let mut key_bar = mb.create_bar(new_reader.num_entries());
    style_bar(&mut key_bar);
    key_bar.message("Key scan ");

    let mut diff_bar = mb.create_bar(new_reader.num_entries());
    style_bar(&mut diff_bar);
    diff_bar.message("Diff     ");
    let diff_bar = sync::Arc::new(sync::Mutex::new(diff_bar));

    let mut write_bar = mb.create_bar(new_reader.num_entries());
    style_bar(&mut write_bar);
    write_bar.message("Write    ");

    let (write_tx, write_rx) = sync::mpsc::channel();

    pool.scope(|scope| {

        scope.submit(|| mb.listen());

        scope.submit(|| diff_writer::write(write_rx, paths.diff_path, write_bar).unwrap());

        for key_chunk in chunks(new_reader.keys()?, CHUNK_SIZE) {
            let chunk_size = key_chunk.len() as u64;

            let old_reader = &old_reader;
            let new_reader = &new_reader;
            let write_tx = write_tx.clone();
            let diff_bar = diff_bar.clone();

            key_bar.add(chunk_size);

            scope.submit(move || {
                for key in key_chunk {
                    let key = key.unwrap();
                    let diff_entry = diff(key, old_reader, new_reader).unwrap();

                        write_tx.send(diff_entry).unwrap();
                }
                diff_bar.lock().unwrap().add(chunk_size);
            });
        }

        key_bar.finish();
        Ok(())
    })
}

fn apply(paths: &Paths) -> error::Result<()> {
    Ok(())
}

fn diff(key: Vec<u8>,
        old_reader: &sparkey::hash::Reader,
        new_reader: &sparkey::hash::Reader)
        -> error::Result<Option<diff::DiffEntry>> {

    let old_entry = old_reader.get(&key)?;
    let new_entry = new_reader.get(&key)?;

    let diff_entry = match (old_entry, new_entry) {
        (Some(a), Some(b)) => {
            if a != b {
                let delta =
                    vcdiff::encode(&a, &b, vcdiff::FORMAT_INTERLEAVED, true);

                let mut entry = diff::DiffEntry::new();
                entry.mut_patch().set_key(key);
                entry.mut_patch().set_delta(delta);

                Some(entry)
            } else {
                None
            }
        }
        (None, Some(b)) => {
            let mut entry = diff::DiffEntry::new();
            entry.mut_put().set_key(key);
            entry.mut_put().set_value(b);

            Some(entry)
        }
        (Some(_), None) => {
            let mut entry = diff::DiffEntry::new();
            entry.mut_delete().set_key(key);

            Some(entry)
        }
        (None, None) => unreachable!(),
    };

    Ok(diff_entry)
}

struct Chunks<I> where I: Iterator {
    iter: I,
    size: usize,
    buf: Vec<I::Item>
}

fn chunks<I>(iter: I, size: usize) -> Chunks<I> where I: Iterator {
    Chunks {
        iter: iter,
        size: size,
        buf: Vec::new(),
    }
}

impl<I> Iterator for Chunks<I> where I: Iterator {
    type Item = Vec<I::Item>;

    fn next(&mut self) -> Option<Self::Item> {
        while let Some(item) = self.iter.next() {
            self.buf.push(item);

            if self.buf.len() >= self.size {
                let chunk = mem::replace(&mut self.buf, Vec::new());
                return Some(chunk);
            }
        }

        if self.buf.is_empty() {
            None
        } else {
            Some(mem::replace(&mut self.buf, Vec::new()))
        }
    }
}

fn style_bar<W>(bar: &mut pbr::ProgressBar<W>)
    where W: io::Write
{
    bar.format("[=> ]");
    bar.tick_format("▏▎▍▌▋▊▉██▉▊▋▌▍▎▏");
    bar.set_max_refresh_rate(Some(time::Duration::from_millis(15)));
}
